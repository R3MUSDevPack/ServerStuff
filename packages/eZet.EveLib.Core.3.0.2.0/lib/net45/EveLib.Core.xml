<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EveLib.Core</name>
    </assembly>
    <members>
        <member name="T:eZet.EveLib.Core.Cache.CacheType">
            <summary>
                Enum CacheType
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Cache.CacheType.Default">
            <summary>
                The default
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Cache.CacheType.ForceCache">
            <summary>
                The force cache
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Cache.CacheType.ForceRefresh">
            <summary>
                The force refresh
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Config">
            <summary>
                Provides configuration and constants for the library.
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Config.Separator">
            <summary>
                Directory Separator
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Config.AppData">
            <summary>
                relCachePath to ApplicationData folder.
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Config.ImagePath">
            <summary>
                relCachePath to image directory
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Config.CacheFactory">
            <summary>
                The cache factory
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Config.UserAgent">
            <summary>
                UserAgent used for HTTP requests
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Converters.BoolConverter">
            <summary>
            Class BoolConverter.
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.EveLib">
            <summary>
                This is a class for general EveLib utilities and methods
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Util.EveLibApiBase">
            <summary>
                A base class for Eve Lib API modules.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Util.EveLibApiBase.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Util.EveLibApiBase.#ctor(System.String,eZet.EveLib.Core.RequestHandlers.IRequestHandler)">
            <summary>
                Constructor
            </summary>
            <param name="uri"></param>
            <param name="requestHandler"></param>
        </member>
        <member name="M:eZet.EveLib.Core.Util.EveLibApiBase.requestAsync``1(System.String)">
            <summary>
                Performs a request using the request handler.
            </summary>
            <typeparam name="T">Response type</typeparam>
            <param name="relPath">Relative path</param>
            <returns></returns>
        </member>
        <member name="P:eZet.EveLib.Core.Util.EveLibApiBase.RequestHandler">
            <summary>
                Gets or sets the request handler used by this instance
            </summary>
        </member>
        <member name="P:eZet.EveLib.Core.Util.EveLibApiBase.Host">
            <summary>
                Gets or sets the base URI used to access this API.
            </summary>
        </member>
        <member name="P:eZet.EveLib.Core.Util.EveLibApiBase.ApiPath">
            <summary>
                Gets or sets the path to the API root relative to Host.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.EveLib.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.EveLib.RequestJsonAsync(System.String)">
            <summary>
                Requests and deserializes JSON content to a dynamic object
            </summary>
            <param name="uri">URI to request</param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.EveLib.RequestJson(System.String)">
            <summary>
                Requests and deserializes JSON content to a dynamic object
            </summary>
            <param name="uri">URI to request</param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.EveLib.RequestXmlAsync(System.String)">
            <summary>
                Requests and deserializes XML content to a dynamic object. Not implemented yet.
            </summary>
            <param name="uri">URI to request</param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.EveLib.RequestXml(System.String)">
            <summary>
                Requests and deserializes XML content to a dynamic object. Not implemented yet.
            </summary>
            <param name="uri">URI to request</param>
            <returns></returns>
        </member>
        <member name="T:eZet.EveLib.Core.Exceptions.EveLibWebException">
            <summary>
                Base for EveLib WebExceptions
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Exceptions.EveLibException">
            <summary>
                Base for all EveLib Exceptions
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Exceptions.EveLibException.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:eZet.EveLib.Core.Exceptions.EveLibException.#ctor(System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="iException"></param>
        </member>
        <member name="M:eZet.EveLib.Core.Exceptions.EveLibWebException.#ctor(System.String,System.Net.WebException)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="iException"></param>
        </member>
        <member name="P:eZet.EveLib.Core.Exceptions.EveLibWebException.WebException">
            <summary>
                The inner exception
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so the check for <c>null</c> is necessary before its usage
            </summary>
            <example>
                <code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
                <code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by format pattern and (optional) arguments.
                Parameter, which contains format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:eZet.EveLib.Core.Properties.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example>
                <code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
                and this method is used to notify that some property value changed
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string CharacterName {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If method has single input parameter, it's name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
                for method output means that the methos doesn't return normally.<br />
                <c>canbenull</c> annotation is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
                or use single attribute with rows separated by semicolon.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.LocalizationRequiredAttribute">
            <summary>
                Indicates that marked element should be localized or not
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly
                (e.g. via reflection, in external library), so this symbol
                will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.MeansImplicitUseAttribute">
            <summary>
                Should be used on attributes and causes ReSharper
                to not mark symbols marked with such attributes as unused
                (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Properties.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:eZet.EveLib.Core.Properties.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:eZet.EveLib.Core.Properties.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Properties.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly
                when marked with <see cref="T:eZet.EveLib.Core.Properties.MeansImplicitUseAttribute"/>
                or <see cref="T:eZet.EveLib.Core.Properties.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Properties.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:eZet.EveLib.Core.Properties.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled
                when the invoked method is on stack. If the parameter is a delegate,
                indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated
                while the method is executed
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example>
                <code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder
                within a web project. relCachePath can be relative or absolute,
                starting from web root (~)
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that
                the parameter is an MVC controller. If applied to a method,
                the MVC controller name is calculated implicitly from the context.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that
                the parameter is an MVC partial view. If applied to a method,
                the MVC partial view name is calculated implicitly from the context.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcSupressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling all inspections
                for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:eZet.EveLib.Core.Properties.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that a parameter or a method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.RequestHandlers.CacheLevel">
            <summary>
                Enum CacheLevel
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.RequestHandlers.CacheLevel.Default">
            <summary>
                Satisfies the request by using local cache if available, or by sending a request to the server if needed. New
                requests may be stored in local cache.
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.RequestHandlers.CacheLevel.BypassCache">
            <summary>
                Bypasses cache complete. A new request will be sent to the server. No entries will be added to or removed from the
                cache.
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.RequestHandlers.CacheLevel.Refresh">
            <summary>
                A request will be sent to the server. Outdated cache will be removed, and a new entry may be stored.
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.RequestHandlers.CacheLevel.CacheOnly">
            <summary>
                Will serve the request from the local cache if any. If no cache is available, the request will return null.
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.RequestHandlers.IImageRequestHandler">
            <summary>
                Interface for requesting images from URIs
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.RequestHandlers.IImageRequestHandler.RequestImageDataAsync(System.Uri)">
            <summary>
                Requests and returns image data
            </summary>
            <param name="uri">URI to request</param>
            <returns>The image data</returns>
        </member>
        <member name="M:eZet.EveLib.Core.RequestHandlers.IImageRequestHandler.RequestImageAsync(System.Uri,System.String)">
            <summary>
                Requests image and saves it to a file.
            </summary>
            <param name="uri">URI to request</param>
            <param name="file">File to save image as.</param>
            <returns>The task</returns>
        </member>
        <member name="T:eZet.EveLib.Core.RequestHandlers.ImageRequestHandler">
            <summary>
                Simple implementation for requesting images
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.RequestHandlers.ImageRequestHandler.RequestImageDataAsync(System.Uri)">
            <summary>
                Requests and returns image data
            </summary>
            <param name="uri">URI to request</param>
            <returns>The image data</returns>
        </member>
        <member name="M:eZet.EveLib.Core.RequestHandlers.ImageRequestHandler.RequestImageAsync(System.Uri,System.String)">
            <summary>
                Requests image and saves it to a file.
            </summary>
            <param name="uri">URI to request</param>
            <param name="file">File to save image as.</param>
            <returns>The task</returns>
        </member>
        <member name="T:eZet.EveLib.Core.Util.AsyncHelpers">
            <summary>
                Class AsyncHelpers.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncHelpers.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Runs the synchronize.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Runs the synchronize.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task">The task.</param>
            <returns>T.</returns>
        </member>
        <member name="T:eZet.EveLib.Core.Util.AsyncHelpers.ExclusiveSynchronizationContext">
            <summary>
                Class ExclusiveSynchronizationContext.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncHelpers.ExclusiveSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
                When overridden in a derived class, dispatches a synchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
            <exception cref="T:System.NotSupportedException">We cannot send to our same thread</exception>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncHelpers.ExclusiveSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
                When overridden in a derived class, dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncHelpers.ExclusiveSynchronizationContext.EndMessageLoop">
            <summary>
                Ends the message loop.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncHelpers.ExclusiveSynchronizationContext.BeginMessageLoop">
            <summary>
                Begins the message loop.
            </summary>
            <exception cref="T:System.AggregateException">AsyncHelpers.Run method threw an exception.</exception>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncHelpers.ExclusiveSynchronizationContext.CreateCopy">
            <summary>
                When overridden in a derived class, creates a copy of the synchronization context.
            </summary>
            <returns>A new <see cref="T:System.Threading.SynchronizationContext" /> object.</returns>
        </member>
        <member name="P:eZet.EveLib.Core.Util.AsyncHelpers.ExclusiveSynchronizationContext.InnerException">
            <summary>
                Gets or sets the inner exception.
            </summary>
            <value>The inner exception.</value>
        </member>
        <member name="T:eZet.EveLib.Core.Util.AsyncLazy`1">
            <summary>
                Provides support for asynchronous lazy initialization. This type is fully threadsafe.
            </summary>
            <typeparam name="T">The type of object that is being asynchronously initialized.</typeparam>
        </member>
        <member name="F:eZet.EveLib.Core.Util.AsyncLazy`1._instance">
            <summary>
                The underlying lazy task.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncLazy`1.#ctor(System.Func{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:eZet.EveLib.Core.Util.AsyncLazy`1"/> class.
            </summary>
            <param name="factory">The delegate that is invoked on a background thread to produce the value when it is needed.</param>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:eZet.EveLib.Core.Util.AsyncLazy`1"/> class.
            </summary>
            <param name="factory">
                The asynchronous delegate that is invoked on a background thread to produce the value when it is
                needed.
            </param>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncLazy`1.GetAwaiter">
            <summary>
                Asynchronous infrastructure support. This method permits instances of
                <see cref="T:eZet.EveLib.Core.Util.AsyncLazy`1"/> to be
                awaited.
            </summary>
            <returns>TaskAwaiter&lt;T&gt;.</returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncLazy`1.ConfigureAwait(System.Boolean)">
            <summary>
                Configures the await.
            </summary>
            <param name="val">if set to <c>true</c> [value].</param>
            <returns>ConfiguredTaskAwaitable&lt;T&gt;.</returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncLazy`1.Start">
            <summary>
                Starts the asynchronous initialization, if it has not already started.
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Serializers.JsonSerializer">
            <summary>
                JSON serializer
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Serializers.ISerializer">
            <summary>
                Interface for deserializing objects.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Serializers.ISerializer.Deserialize``1(System.String)">
            <summary>
                Deserializes data.
            </summary>
            <typeparam name="T">Type to deserialize to.</typeparam>
            <param name="data">String of data to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.Serializers.JsonSerializer.eZet#EveLib#Core#Serializers#ISerializer#Deserialize``1(System.String)">
            <summary>
                Deserializes JSON
            </summary>
            <param name="data">A JSON string</param>
            <returns></returns>
        </member>
        <member name="T:eZet.EveLib.Core.Util.AsyncFileUtilities">
            <summary>
                Async file utilities
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncFileUtilities.ReadAllTextAsync(System.String)">
            <summary>
                Reads all test async
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncFileUtilities.ReadAllLinesAsync(System.String)">
            <summary>
                Reads all lines async
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncFileUtilities.WriteAllTextAsync(System.String,System.String)">
            <summary>
                Writes all test async
            </summary>
            <param name="filePath"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.AsyncFileUtilities.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Writes all lines async
            </summary>
            <param name="filePath"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="T:eZet.EveLib.Core.RequestHandlers.ICachedRequestHandler">
            <summary>
                Interface for a cache enabled request handler
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.RequestHandlers.IRequestHandler">
            <summary>
                Interface for Request Handlers
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.RequestHandlers.IRequestHandler.RequestAsync``1(System.Uri)">
            <summary>
                Performs a request and returns the deserialized response content
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="uri">URI to request</param>
            <returns>Deserialized response</returns>
        </member>
        <member name="P:eZet.EveLib.Core.RequestHandlers.IRequestHandler.Serializer">
            <summary>
                Gets or sets the serializer used to deserialize data
            </summary>
        </member>
        <member name="P:eZet.EveLib.Core.RequestHandlers.ICachedRequestHandler.Cache">
            <summary>
                Gets or sets the cache used by this request handler
            </summary>
        </member>
        <member name="P:eZet.EveLib.Core.RequestHandlers.ICachedRequestHandler.CacheLevel">
            <summary>
                Gets or sets the cache level.
            </summary>
            <value>The cache level.</value>
        </member>
        <member name="T:eZet.EveLib.Core.Cache.IEveLibCache">
            <summary>
                Interface for CacheExpiratoinRegisters
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Cache.IEveLibCache.StoreAsync(System.Uri,System.DateTime,System.String)">
            <summary>
                Stores data to the cache
            </summary>
            <param name="uri">The uri this caches</param>
            <param name="cacheTime">The cache expiry time</param>
            <param name="data">The data to cache</param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.Cache.IEveLibCache.LoadAsync(System.Uri)">
            <summary>
                Loads data from cache
            </summary>
            <param name="uri">The uri to load cache for</param>
            <returns>The cached data</returns>
        </member>
        <member name="M:eZet.EveLib.Core.Cache.IEveLibCache.TryGetExpirationDate(System.Uri,System.DateTime@)">
            <summary>
                Attempts to get the CachedUntil date for a uri.
            </summary>
            <param name="uri">The uri to look up.</param>
            <param name="value">A DateTime instance to store the date in.</param>
            <returns>True if an entry was retrieved, otherwise false.</returns>
        </member>
        <member name="T:eZet.EveLib.Core.RequestHandlers.RequestHandler">
            <summary>
                A basic RequestHandler with no special handling.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.RequestHandlers.RequestHandler.#ctor(eZet.EveLib.Core.Serializers.ISerializer)">
            <summary>
                Constructor
            </summary>
            <param name="serializer">Serializer to use for deserialization</param>
        </member>
        <member name="M:eZet.EveLib.Core.RequestHandlers.RequestHandler.RequestAsync``1(System.Uri)">
            <summary>
                Performs a request against the specified URI, and returns the deserialized data.
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="uri">URI to request</param>
            <returns></returns>
        </member>
        <member name="P:eZet.EveLib.Core.RequestHandlers.RequestHandler.Serializer">
            <summary>
                Gets or sets the ISerializer used to deserialize response data.
            </summary>
        </member>
        <member name="T:eZet.EveLib.Core.Serializers.XmlSerializer">
            <summary>
                A simple wrapper for .NET XmlSerializer.
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Serializers.XmlSerializer.eZet#EveLib#Core#Serializers#ISerializer#Deserialize``1(System.String)">
            <summary>
                Deserializes Eve API xml using the .NET XmlSerializer.
            </summary>
            <typeparam name="T">An xml result type</typeparam>
            <param name="data">An XML string</param>
            <returns></returns>
        </member>
        <member name="T:eZet.EveLib.Core.Util.HttpRequestHelper">
            <summary>
                Helper class for performing web requests
            </summary>
        </member>
        <member name="F:eZet.EveLib.Core.Util.HttpRequestHelper.ContentType">
            <summary>
                Default content type
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Util.HttpRequestHelper.CreateRequest(System.Uri)">
            <summary>
                Creates a new HttpWebRequest for the specified URI, and returns it
            </summary>
            <param name="uri">URI to create request for</param>
            <returns>The HttpWebRequest</returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.HttpRequestHelper.RequestAsync(System.Uri)">
            <summary>
                Performs a web request against the specified URI, and returns the response content
            </summary>
            <param name="uri">URI to request</param>
            <returns>The response content</returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.HttpRequestHelper.AddPostData(System.Net.HttpWebRequest,System.String)">
            <summary>
                Adds the post data.
            </summary>
            <param name="request">The request.</param>
            <param name="postData">The post data.</param>
        </member>
        <member name="M:eZet.EveLib.Core.Util.HttpRequestHelper.GetResponseAsync(System.Net.HttpWebRequest)">
            <summary>
                Executes a web request using the given request, and returns the HttpWebResponse
            </summary>
            <param name="request">The web request</param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.HttpRequestHelper.GetResponseContentAsync(System.Net.HttpWebResponse)">
            <summary>
                Extracts and returns the response content from a HttpWebResponse
            </summary>
            <param name="response">The HttpWebResponse</param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.Util.HttpRequestHelper.GetResponseContentAsync(System.Net.HttpWebRequest)">
            <summary>
                Executes, exctracts and returns response content for a HttpWebRequest
            </summary>
            <param name="request">The HttpWebRequest</param>
            <returns></returns>
        </member>
        <member name="T:eZet.EveLib.Core.Cache.EveLibFileCache">
            <summary>
                Simple plain file cache implementation
            </summary>
        </member>
        <member name="M:eZet.EveLib.Core.Cache.EveLibFileCache.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:eZet.EveLib.Core.Cache.EveLibFileCache"/> class.
            </summary>
            <param name="cachePath">The relative cache path.</param>
            <param name="cacheRegisterName">Name of the cache register.</param>
        </member>
        <member name="M:eZet.EveLib.Core.Cache.EveLibFileCache.StoreAsync(System.Uri,System.DateTime,System.String)">
            <summary>
                Stores data to the cache
            </summary>
            <param name="uri">The uri this caches</param>
            <param name="cacheTime">The cache expiry time</param>
            <param name="data">The data to cache</param>
            <returns></returns>
        </member>
        <member name="M:eZet.EveLib.Core.Cache.EveLibFileCache.LoadAsync(System.Uri)">
            <summary>
                Loads data from cache
            </summary>
            <param name="uri">The uri to load cache for</param>
            <returns>The cached data</returns>
        </member>
        <member name="M:eZet.EveLib.Core.Cache.EveLibFileCache.TryGetExpirationDate(System.Uri,System.DateTime@)">
            <summary>
                Gets the cache expiry time for specified uri
            </summary>
            <param name="uri"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:eZet.EveLib.Core.Cache.EveLibFileCache.CachePath">
            <summary>
                Gets the cache path.
            </summary>
            <value>The cache path.</value>
        </member>
        <member name="P:eZet.EveLib.Core.Cache.EveLibFileCache.CacheRegister">
            <summary>
                Gets the cache register.
            </summary>
            <value>The cache register.</value>
        </member>
    </members>
</doc>
